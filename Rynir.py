# -*- coding: utf-8 -*-

import sys
import threading
import thread
import Queue
from QueryStringHandler import QueryStringHandler

class Rynir:
	def __init__(self):
		#self.handler = QueryStringHandler()
		self.queue = Queue.Queue()
		self.report = []
		self.lock = thread.allocate_lock()
		self.numberOfThreads = 5
	#param: list of querystrings, ok if single queryString
	#return: returns list of reports, generated by Notifier.getReports
	def analyze(self, queryStringList):
		#thread me!		
		if type(queryStringList) != list:
			queryStringList = [queryStringList]
		try:
			for item in queryStringList:
				self.queue.put(item)
				#report.append(self.handler.getReport(item))
			
			for i in range(self.numberOfThreads):
				thread = ThreadHelper(self.queue, self.report, self.lock)
				thread.setDaemon(True)
				thread.start()

			self.queue.join()

				
		except:
			print "Unexpected error:", sys.exc_info()[0]
			raise
			
		return self.report


class ThreadHelper(threading.Thread):
	def __init__(self, queue, report, lock):
		threading.Thread.__init__(self)
		self.handler = QueryStringHandler()
		self.queue = queue
		self.report = report 
		self.lock = lock
		
	def run(self):
		while True:
			print self
			try:
				dataSetReport = self.handler.getReport(self.queue.get())
				
				self.lock.acquire()
				self.report.append(dataSetReport)
				self.lock.release()
			except:
				#logga í skrá
				pass
			finally:
				self.queue.task_done()